#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Navigation_Drawer_App
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="gestion_magasin")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategorie(Categorie instance);
    partial void UpdateCategorie(Categorie instance);
    partial void DeleteCategorie(Categorie instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void Insertsous_categorie(sous_categorie instance);
    partial void Updatesous_categorie(sous_categorie instance);
    partial void Deletesous_categorie(sous_categorie instance);
    partial void Insertpersonnel(personnel instance);
    partial void Updatepersonnel(personnel instance);
    partial void Deletepersonnel(personnel instance);
    partial void Insertcommande(commande instance);
    partial void Updatecommande(commande instance);
    partial void Deletecommande(commande instance);
    partial void Insertmateriel(materiel instance);
    partial void Updatemateriel(materiel instance);
    partial void Deletemateriel(materiel instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Navigation_Drawer_App.Properties.Settings.Default.gestion_magasinConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Categorie> Categories
		{
			get
			{
				return this.GetTable<Categorie>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<sous_categorie> sous_categories
		{
			get
			{
				return this.GetTable<sous_categorie>();
			}
		}
		
		public System.Data.Linq.Table<personnel> personnels
		{
			get
			{
				return this.GetTable<personnel>();
			}
		}
		
		public System.Data.Linq.Table<commande> commandes
		{
			get
			{
				return this.GetTable<commande>();
			}
		}
		
		public System.Data.Linq.Table<materiel> materiels
		{
			get
			{
				return this.GetTable<materiel>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categorie")]
	public partial class Categorie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NomCategorie;
		
		private EntitySet<sous_categorie> _sous_categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomCategorieChanging(string value);
    partial void OnNomCategorieChanged();
    #endregion
		
		public Categorie()
		{
			this._sous_categories = new EntitySet<sous_categorie>(new Action<sous_categorie>(this.attach_sous_categories), new Action<sous_categorie>(this.detach_sous_categories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomCategorie", DbType="NVarChar(100)")]
		public string NomCategorie
		{
			get
			{
				return this._NomCategorie;
			}
			set
			{
				if ((this._NomCategorie != value))
				{
					this.OnNomCategorieChanging(value);
					this.SendPropertyChanging();
					this._NomCategorie = value;
					this.SendPropertyChanged("NomCategorie");
					this.OnNomCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categorie_sous_categorie", Storage="_sous_categories", ThisKey="Id", OtherKey="IdCat")]
		public EntitySet<sous_categorie> sous_categories
		{
			get
			{
				return this._sous_categories;
			}
			set
			{
				this._sous_categories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sous_categories(sous_categorie entity)
		{
			this.SendPropertyChanging();
			entity.Categorie = this;
		}
		
		private void detach_sous_categories(sous_categorie entity)
		{
			this.SendPropertyChanging();
			entity.Categorie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idS;
		
		private string _nomS;
		
		private EntitySet<commande> _commandes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSChanging(int value);
    partial void OnidSChanged();
    partial void OnnomSChanging(string value);
    partial void OnnomSChanged();
    #endregion
		
		public Service()
		{
			this._commandes = new EntitySet<commande>(new Action<commande>(this.attach_commandes), new Action<commande>(this.detach_commandes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idS", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idS
		{
			get
			{
				return this._idS;
			}
			set
			{
				if ((this._idS != value))
				{
					this.OnidSChanging(value);
					this.SendPropertyChanging();
					this._idS = value;
					this.SendPropertyChanged("idS");
					this.OnidSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomS", DbType="NVarChar(50)")]
		public string nomS
		{
			get
			{
				return this._nomS;
			}
			set
			{
				if ((this._nomS != value))
				{
					this.OnnomSChanging(value);
					this.SendPropertyChanging();
					this._nomS = value;
					this.SendPropertyChanged("nomS");
					this.OnnomSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_commande", Storage="_commandes", ThisKey="idS", OtherKey="IDSer")]
		public EntitySet<commande> commandes
		{
			get
			{
				return this._commandes;
			}
			set
			{
				this._commandes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commandes(commande entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_commandes(commande entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sous_categorie")]
	public partial class sous_categorie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdSC;
		
		private string _NomSousCategorie;
		
		private System.Nullable<int> _IdCat;
		
		private EntitySet<materiel> _materiels;
		
		private EntityRef<Categorie> _Categorie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdSCChanging(int value);
    partial void OnIdSCChanged();
    partial void OnNomSousCategorieChanging(string value);
    partial void OnNomSousCategorieChanged();
    partial void OnIdCatChanging(System.Nullable<int> value);
    partial void OnIdCatChanged();
    #endregion
		
		public sous_categorie()
		{
			this._materiels = new EntitySet<materiel>(new Action<materiel>(this.attach_materiels), new Action<materiel>(this.detach_materiels));
			this._Categorie = default(EntityRef<Categorie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSC", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdSC
		{
			get
			{
				return this._IdSC;
			}
			set
			{
				if ((this._IdSC != value))
				{
					this.OnIdSCChanging(value);
					this.SendPropertyChanging();
					this._IdSC = value;
					this.SendPropertyChanged("IdSC");
					this.OnIdSCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomSousCategorie", DbType="NVarChar(100)")]
		public string NomSousCategorie
		{
			get
			{
				return this._NomSousCategorie;
			}
			set
			{
				if ((this._NomSousCategorie != value))
				{
					this.OnNomSousCategorieChanging(value);
					this.SendPropertyChanging();
					this._NomSousCategorie = value;
					this.SendPropertyChanged("NomSousCategorie");
					this.OnNomSousCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCat", DbType="Int")]
		public System.Nullable<int> IdCat
		{
			get
			{
				return this._IdCat;
			}
			set
			{
				if ((this._IdCat != value))
				{
					if (this._Categorie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCatChanging(value);
					this.SendPropertyChanging();
					this._IdCat = value;
					this.SendPropertyChanged("IdCat");
					this.OnIdCatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sous_categorie_materiel", Storage="_materiels", ThisKey="IdSC", OtherKey="id_sous_cat")]
		public EntitySet<materiel> materiels
		{
			get
			{
				return this._materiels;
			}
			set
			{
				this._materiels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categorie_sous_categorie", Storage="_Categorie", ThisKey="IdCat", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Categorie Categorie
		{
			get
			{
				return this._Categorie.Entity;
			}
			set
			{
				Categorie previousValue = this._Categorie.Entity;
				if (((previousValue != value) 
							|| (this._Categorie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categorie.Entity = null;
						previousValue.sous_categories.Remove(this);
					}
					this._Categorie.Entity = value;
					if ((value != null))
					{
						value.sous_categories.Add(this);
						this._IdCat = value.Id;
					}
					else
					{
						this._IdCat = default(Nullable<int>);
					}
					this.SendPropertyChanged("Categorie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_materiels(materiel entity)
		{
			this.SendPropertyChanging();
			entity.sous_categorie = this;
		}
		
		private void detach_materiels(materiel entity)
		{
			this.SendPropertyChanging();
			entity.sous_categorie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.personnel")]
	public partial class personnel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idP;
		
		private string _nom;
		
		private string _prenom;
		
		private string _email;
		
		private string _login;
		
		private string _password;
		
		private EntitySet<commande> _commandes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPChanging(int value);
    partial void OnidPChanged();
    partial void OnnomChanging(string value);
    partial void OnnomChanged();
    partial void OnprenomChanging(string value);
    partial void OnprenomChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public personnel()
		{
			this._commandes = new EntitySet<commande>(new Action<commande>(this.attach_commandes), new Action<commande>(this.detach_commandes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idP
		{
			get
			{
				return this._idP;
			}
			set
			{
				if ((this._idP != value))
				{
					this.OnidPChanging(value);
					this.SendPropertyChanging();
					this._idP = value;
					this.SendPropertyChanged("idP");
					this.OnidPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom", DbType="NVarChar(50)")]
		public string nom
		{
			get
			{
				return this._nom;
			}
			set
			{
				if ((this._nom != value))
				{
					this.OnnomChanging(value);
					this.SendPropertyChanging();
					this._nom = value;
					this.SendPropertyChanged("nom");
					this.OnnomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prenom", DbType="NVarChar(50)")]
		public string prenom
		{
			get
			{
				return this._prenom;
			}
			set
			{
				if ((this._prenom != value))
				{
					this.OnprenomChanging(value);
					this.SendPropertyChanging();
					this._prenom = value;
					this.SendPropertyChanged("prenom");
					this.OnprenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="NVarChar(50)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="personnel_commande", Storage="_commandes", ThisKey="idP", OtherKey="IdPer")]
		public EntitySet<commande> commandes
		{
			get
			{
				return this._commandes;
			}
			set
			{
				this._commandes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commandes(commande entity)
		{
			this.SendPropertyChanging();
			entity.personnel = this;
		}
		
		private void detach_commandes(commande entity)
		{
			this.SendPropertyChanging();
			entity.personnel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.commande")]
	public partial class commande : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCommande;
		
		private System.Nullable<int> _quantite;
		
		private System.Nullable<int> _IdMat;
		
		private System.Nullable<int> _IdPer;
		
		private System.Nullable<int> _IDSer;
		
		private string _Date;
		
		private EntityRef<personnel> _personnel;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<materiel> _materiel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCommandeChanging(int value);
    partial void OnIdCommandeChanged();
    partial void OnquantiteChanging(System.Nullable<int> value);
    partial void OnquantiteChanged();
    partial void OnIdMatChanging(System.Nullable<int> value);
    partial void OnIdMatChanged();
    partial void OnIdPerChanging(System.Nullable<int> value);
    partial void OnIdPerChanged();
    partial void OnIDSerChanging(System.Nullable<int> value);
    partial void OnIDSerChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    #endregion
		
		public commande()
		{
			this._personnel = default(EntityRef<personnel>);
			this._Service = default(EntityRef<Service>);
			this._materiel = default(EntityRef<materiel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCommande", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCommande
		{
			get
			{
				return this._IdCommande;
			}
			set
			{
				if ((this._IdCommande != value))
				{
					this.OnIdCommandeChanging(value);
					this.SendPropertyChanging();
					this._IdCommande = value;
					this.SendPropertyChanged("IdCommande");
					this.OnIdCommandeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantite", DbType="Int")]
		public System.Nullable<int> quantite
		{
			get
			{
				return this._quantite;
			}
			set
			{
				if ((this._quantite != value))
				{
					this.OnquantiteChanging(value);
					this.SendPropertyChanging();
					this._quantite = value;
					this.SendPropertyChanged("quantite");
					this.OnquantiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMat", DbType="Int")]
		public System.Nullable<int> IdMat
		{
			get
			{
				return this._IdMat;
			}
			set
			{
				if ((this._IdMat != value))
				{
					if (this._materiel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMatChanging(value);
					this.SendPropertyChanging();
					this._IdMat = value;
					this.SendPropertyChanged("IdMat");
					this.OnIdMatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPer", DbType="Int")]
		public System.Nullable<int> IdPer
		{
			get
			{
				return this._IdPer;
			}
			set
			{
				if ((this._IdPer != value))
				{
					if (this._personnel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPerChanging(value);
					this.SendPropertyChanging();
					this._IdPer = value;
					this.SendPropertyChanged("IdPer");
					this.OnIdPerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSer", DbType="Int")]
		public System.Nullable<int> IDSer
		{
			get
			{
				return this._IDSer;
			}
			set
			{
				if ((this._IDSer != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSerChanging(value);
					this.SendPropertyChanging();
					this._IDSer = value;
					this.SendPropertyChanged("IDSer");
					this.OnIDSerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="VarChar(50)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="personnel_commande", Storage="_personnel", ThisKey="IdPer", OtherKey="idP", IsForeignKey=true, DeleteRule="CASCADE")]
		public personnel personnel
		{
			get
			{
				return this._personnel.Entity;
			}
			set
			{
				personnel previousValue = this._personnel.Entity;
				if (((previousValue != value) 
							|| (this._personnel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._personnel.Entity = null;
						previousValue.commandes.Remove(this);
					}
					this._personnel.Entity = value;
					if ((value != null))
					{
						value.commandes.Add(this);
						this._IdPer = value.idP;
					}
					else
					{
						this._IdPer = default(Nullable<int>);
					}
					this.SendPropertyChanged("personnel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_commande", Storage="_Service", ThisKey="IDSer", OtherKey="idS", IsForeignKey=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.commandes.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.commandes.Add(this);
						this._IDSer = value.idS;
					}
					else
					{
						this._IDSer = default(Nullable<int>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="materiel_commande", Storage="_materiel", ThisKey="IdMat", OtherKey="id_materiel", IsForeignKey=true, DeleteRule="CASCADE")]
		public materiel materiel
		{
			get
			{
				return this._materiel.Entity;
			}
			set
			{
				materiel previousValue = this._materiel.Entity;
				if (((previousValue != value) 
							|| (this._materiel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._materiel.Entity = null;
						previousValue.commandes.Remove(this);
					}
					this._materiel.Entity = value;
					if ((value != null))
					{
						value.commandes.Add(this);
						this._IdMat = value.id_materiel;
					}
					else
					{
						this._IdMat = default(Nullable<int>);
					}
					this.SendPropertyChanged("materiel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.materiels")]
	public partial class materiel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_materiel;
		
		private string _nom_materiel;
		
		private System.Nullable<System.DateTime> _date_entree;
		
		private System.Nullable<int> _num_inventaire;
		
		private string _fornisseur;
		
		private System.Nullable<int> _quantite;
		
		private string _bon_commande;
		
		private string _bon_iveraison;
		
		private System.Nullable<int> _stock;
		
		private System.Nullable<int> _id_sous_cat;
		
		private EntitySet<commande> _commandes;
		
		private EntityRef<sous_categorie> _sous_categorie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_materielChanging(int value);
    partial void Onid_materielChanged();
    partial void Onnom_materielChanging(string value);
    partial void Onnom_materielChanged();
    partial void Ondate_entreeChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_entreeChanged();
    partial void Onnum_inventaireChanging(System.Nullable<int> value);
    partial void Onnum_inventaireChanged();
    partial void OnfornisseurChanging(string value);
    partial void OnfornisseurChanged();
    partial void OnquantiteChanging(System.Nullable<int> value);
    partial void OnquantiteChanged();
    partial void Onbon_commandeChanging(string value);
    partial void Onbon_commandeChanged();
    partial void Onbon_iveraisonChanging(string value);
    partial void Onbon_iveraisonChanged();
    partial void OnstockChanging(System.Nullable<int> value);
    partial void OnstockChanged();
    partial void Onid_sous_catChanging(System.Nullable<int> value);
    partial void Onid_sous_catChanged();
    #endregion
		
		public materiel()
		{
			this._commandes = new EntitySet<commande>(new Action<commande>(this.attach_commandes), new Action<commande>(this.detach_commandes));
			this._sous_categorie = default(EntityRef<sous_categorie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_materiel", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_materiel
		{
			get
			{
				return this._id_materiel;
			}
			set
			{
				if ((this._id_materiel != value))
				{
					this.Onid_materielChanging(value);
					this.SendPropertyChanging();
					this._id_materiel = value;
					this.SendPropertyChanged("id_materiel");
					this.Onid_materielChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_materiel", DbType="NChar(10)")]
		public string nom_materiel
		{
			get
			{
				return this._nom_materiel;
			}
			set
			{
				if ((this._nom_materiel != value))
				{
					this.Onnom_materielChanging(value);
					this.SendPropertyChanging();
					this._nom_materiel = value;
					this.SendPropertyChanged("nom_materiel");
					this.Onnom_materielChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_entree", DbType="Date")]
		public System.Nullable<System.DateTime> date_entree
		{
			get
			{
				return this._date_entree;
			}
			set
			{
				if ((this._date_entree != value))
				{
					this.Ondate_entreeChanging(value);
					this.SendPropertyChanging();
					this._date_entree = value;
					this.SendPropertyChanged("date_entree");
					this.Ondate_entreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num_inventaire", DbType="Int")]
		public System.Nullable<int> num_inventaire
		{
			get
			{
				return this._num_inventaire;
			}
			set
			{
				if ((this._num_inventaire != value))
				{
					this.Onnum_inventaireChanging(value);
					this.SendPropertyChanging();
					this._num_inventaire = value;
					this.SendPropertyChanged("num_inventaire");
					this.Onnum_inventaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fornisseur", DbType="NChar(10)")]
		public string fornisseur
		{
			get
			{
				return this._fornisseur;
			}
			set
			{
				if ((this._fornisseur != value))
				{
					this.OnfornisseurChanging(value);
					this.SendPropertyChanging();
					this._fornisseur = value;
					this.SendPropertyChanged("fornisseur");
					this.OnfornisseurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantite", DbType="Int")]
		public System.Nullable<int> quantite
		{
			get
			{
				return this._quantite;
			}
			set
			{
				if ((this._quantite != value))
				{
					this.OnquantiteChanging(value);
					this.SendPropertyChanging();
					this._quantite = value;
					this.SendPropertyChanged("quantite");
					this.OnquantiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bon_commande", DbType="NChar(10)")]
		public string bon_commande
		{
			get
			{
				return this._bon_commande;
			}
			set
			{
				if ((this._bon_commande != value))
				{
					this.Onbon_commandeChanging(value);
					this.SendPropertyChanging();
					this._bon_commande = value;
					this.SendPropertyChanged("bon_commande");
					this.Onbon_commandeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bon_iveraison", DbType="NChar(10)")]
		public string bon_iveraison
		{
			get
			{
				return this._bon_iveraison;
			}
			set
			{
				if ((this._bon_iveraison != value))
				{
					this.Onbon_iveraisonChanging(value);
					this.SendPropertyChanging();
					this._bon_iveraison = value;
					this.SendPropertyChanged("bon_iveraison");
					this.Onbon_iveraisonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stock", DbType="Int")]
		public System.Nullable<int> stock
		{
			get
			{
				return this._stock;
			}
			set
			{
				if ((this._stock != value))
				{
					this.OnstockChanging(value);
					this.SendPropertyChanging();
					this._stock = value;
					this.SendPropertyChanged("stock");
					this.OnstockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_sous_cat", DbType="Int")]
		public System.Nullable<int> id_sous_cat
		{
			get
			{
				return this._id_sous_cat;
			}
			set
			{
				if ((this._id_sous_cat != value))
				{
					if (this._sous_categorie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_sous_catChanging(value);
					this.SendPropertyChanging();
					this._id_sous_cat = value;
					this.SendPropertyChanged("id_sous_cat");
					this.Onid_sous_catChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="materiel_commande", Storage="_commandes", ThisKey="id_materiel", OtherKey="IdMat")]
		public EntitySet<commande> commandes
		{
			get
			{
				return this._commandes;
			}
			set
			{
				this._commandes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sous_categorie_materiel", Storage="_sous_categorie", ThisKey="id_sous_cat", OtherKey="IdSC", IsForeignKey=true, DeleteRule="CASCADE")]
		public sous_categorie sous_categorie
		{
			get
			{
				return this._sous_categorie.Entity;
			}
			set
			{
				sous_categorie previousValue = this._sous_categorie.Entity;
				if (((previousValue != value) 
							|| (this._sous_categorie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sous_categorie.Entity = null;
						previousValue.materiels.Remove(this);
					}
					this._sous_categorie.Entity = value;
					if ((value != null))
					{
						value.materiels.Add(this);
						this._id_sous_cat = value.IdSC;
					}
					else
					{
						this._id_sous_cat = default(Nullable<int>);
					}
					this.SendPropertyChanged("sous_categorie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commandes(commande entity)
		{
			this.SendPropertyChanging();
			entity.materiel = this;
		}
		
		private void detach_commandes(commande entity)
		{
			this.SendPropertyChanging();
			entity.materiel = null;
		}
	}
}
#pragma warning restore 1591
